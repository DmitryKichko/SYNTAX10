Переопределение методов:
   Переопределение методов - это механизм в Java, с помощью которого дочерние классы предоставляют
   собственное поведение с тем же именем метода, что и в родительском классе.
Правила для переопределения:
   1) должно быть как минимум два класса с отношениями родитель-ребенок
   2) метод в дочернем классе должен иметь тот же тип возврата
   3) имя метода с параметрами (сигнатура метода) должно быть одинаковым
   4) те члены класса, которые не участвуют в наследовании, не могут быть переопределены.
   не могут быть переопределены, например, 1) конструкторы 2) приватные методы
   5) Уровень доступа метода или свойства не может быть более ограничительным
   например, если метод в родительском классе имеет модификатор доступа public, мы не можем изменить его на protected или default или private.
   его на protected или default или private, но мы можем сделать обратное.
   6) мы не можем переопределить статический метод, но мы можем повторно объявить этот метод в дочернем классе.
   это просто другое имя, механизм такой же, как и у нестатических методов.
   7) это также называется динамическим полиморфизмом/поздним связыванием
   8) мы можем использовать @Override, чтобы проверить, является ли наш переопределяемый метод правильным или нет.

Перегрузка                               против                      переопределения
Тип возврата метода не имеет значения ============== Тип возврата метода имеет значение
Подпись метода должна быть разной                    Подпись метода должна быть одинаковой
Модификаторы доступа не имеют значения               Модификаторы доступа имеют значение
Наследование не нужно                                Нужны отношения наследования
мы можем перегрузить конструктор или конструкторы, а частные методы не могут быть переопределены
мы можем перегружать статические методы              мы не можем переопределять статические методы
=================================================================================================================
Мы можем хранить объект дочернего класса внутри переменной типа родительского класса
но мы сможем вызывать только те методы, которые присутствуют в родительском классе.
Если мы хотим вызвать методы из дочернего класса, мы должны сначала преобразовать переменную родительского типа в переменную типа Child, используя приведенный ниже синтаксис.
в тип Child, используя следующий синтаксис
(ChildType)ParentVar преобразует ее в тип child теперь мы можем вызывать определенные методы
из дочернего класса
С помощью этого кастинга мы можем создать массив, который может содержать все объекты всех
дочерних классов родителя, а благодаря переопределению все методы имеют одинаковые имена.
Теперь мы можем выполнять все методы из всех дочерних классов с помощью массива.
без написания всего кода вручную.
============================================================================================
Final
в java означает, что что-то завершено и не нуждается в модификациях.
Если мы используем ключевое слово final с переменной, мы не можем изменить значение этой переменной.
Если мы используем его с методами, ни один дочерний класс не сможет переопределить этот метод
Если мы используем его с именем класса, ни один класс не сможет наследоваться от этого класса

class Test{
final int a=10;
a=20                 // error, не может быть изменена
}

final class Parent {
final void method(){           // error, не может быть переопределена 
}
}
class Child extends Parent{      // Ошибка, не может наследоваться
void method(){
}

}