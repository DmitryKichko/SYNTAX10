Абстрагирование - это процесс сокрытия деталей реализации и демонстрации функциональности

Абстрактные классы:
Абстрактные классы - это классы, объявленные с ключевым словом abstract, которые помогают нам достичь абстракции
абстрагирования.

Абстракция помогает нам разделить объем работы на несколько дочерних классов и уменьшить сложность кода.

Правила:
1) Использовать ключевое слово abstract для определения абстрактного класса
2) Мы можем иметь абстрактный класс с абстрактными методами или без них
3) Мы должны объявить класс как abstract, даже если у нас есть один абстрактный метод внутри него.
4) Мы не можем создавать объект абстрактного класса напрямую, но можем расширять этот класс.
5) Мы можем создавать объекты дочерних классов, и тогда мы сможем использовать поля и методы абстрактного класса.
6) Мы не можем объявить класс как конечный (final) и абстрактный (abstract), потому что конечный означает отсутствие расширения,
а абстрактный означает неполноту, и некоторые классы должны расширять его и дополнять.
7) В абстрактном классе мы можем иметь public, protected, private методы.
Но в интерфейсе все поля всегда являются public static final (общедоступными).
8) Мы не можем иметь метод как статический и абстрактный в одно и то же время.
9) Мы не можем иметь метод как private и abstract, потому что приватные методы
не участвуют в наследовании, и мы никогда не сможем предоставить boyd этого метода.
10) Мы не можем иметь метод как final и абстрактный.



abstract class Animal{

}
=============================================================================================
Интерфейс в java

Интерфейсы в java также используются для достижения абстракции

Правила:

1) Все поля в интерфейсе по умолчанию являются общедоступными статическими и конечными (public static final)

2) Все методы в интерфейсе по умолчанию являются общедоступными и абстрактными (public abstract)

В классах мы расширяем (extends)
В интерфейсах мы реализуем (implements)

Класс - описывает атрибуты и поведение объекта.
Интерфейс - содержит поведение, которое реализует класс.

Класс может наследовать только один класс, но расширять (implements) множество интерфейсов

