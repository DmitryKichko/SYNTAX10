Приведение в непримитивные типы данных:

Поскольку мы можем преобразовывать примитивные типы данных с помощью кастинга, мы можем сделать то же самое со строкой
с непримитивными типами.

Правила:
Родительские классы считаются большим типом данных в непримитивах
Мы можем хранить объект дочернего класса в переменной типа Parent (родителя).

class Parent{
String name;
void printName(){
}
}
class Child extends Parent{

void myOwnMethod{

}
}

Parent parent = new Child();
parent.myOwnMethod()//  мы можем выполнить задание выше, но не можем выполнить обратное.
Child child = new Parent(); // error (ошибка)

Преимущества приведения:

- Мы можем достичь полиморфизма во время выполнения с помощью приведения и переопределения методов
- Мы можем хранить объекты всех дочерних классов в массивах или других структурах данных
- Мы можем писать динамический код для доступа ко всем этим объектам и выполнять одни и те же методы на разных объектах.
- Когда мы храним объект дочернего класса в переменной родительского типа, мы не можем использовать методы, специфичные для дочерних классов.
- Если мы хотим вызвать методы дочернего класса, мы можем это сделать, но сначала мы должны привести этот объект.
- Это называется полиморфизмом во время выполнения или поздним связыванием.


Ключевое слово final:
1) final с переменными, если мы используем ключевое слово final с переменными, мы не можем изменить их значения.
2) если мы используем final с методом, мы не можем переопределить этот метод в дочернем классе.
3) если мы используем final с классом, мы не можем наследоваться от этого класса.

HW:
- Создайте класс Компьютер, который будет иметь 4 подкласса: Apple, Lenovo, HP, Dell.
- Определите общее поведение внутри и некоторые поля в родительском классе и переопределите некоторые методы в дочернем классе.
- Определите некоторые методы, специфичные для дочерних классов
- Создайте объекты дочерних классов и сохраните их в массив. Пройдитесь по каждому объекту и выполните доступные методы

========================================================================================================
Абстракция:
- это процесс сокрытия деталей реализации и демонстрации только функциональности.

Вопрос для интервью:
Как мы можем добиться множественного наследования в Java?
С помощью интерфейсов